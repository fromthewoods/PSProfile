{
  "Example-Function": {
    "prefix": "ex-function",
    "body": [
      "function Verb-Noun {",
      "\t<#",
      "\t\t.SYNOPSIS",
      "\t\t\tShort description",
      "\t\t.DESCRIPTION",
      "\t\t\tLong description",
      "\t\t.PARAMETER Param1",
      "\t\t\tSpecifies...",
      "\t\t.EXAMPLE",
      "\t\t\tExample here",
      "\t#>",
      "\t[CmdletBinding(SupportsShouldProcess=\\$True)]",
      "\t[OutputType([object])]",
      "\tParam (",
      "\t\t[Parameter(Mandatory=\\$true,",
      "\t\t           ValueFromPipelineByPropertyName=\\$false,",
      "\t\t           Position=0)]",
      "\t\t[string]\\$Param1,",
      "",
      "\t\t[Parameter(Mandatory=\\$true,",
      "\t\t           ValueFromPipelineByPropertyName=\\$false,",
      "\t\t           Position=1)]",
      "\t\t[string]\\$Param2",
      "\t)",
      "\t",
      "\tBegin {}",
      "\tProcess {",
      "\t\tTry {",
      "\t\t\tWrite-Verbose 'What are we doing?'",
      "\t\t\tIf (\\$sometest -eq \\$true) {",
      "\t\t\t\tWrite-Verbose 'Some message'",
      "\t\t\t\tReturn \\$true",
      "\t\t\t}",
      "\t\t\tElse {",
      "\t\t\t\tWrite-Verbose 'This did not work so return $false.'",
      "\t\t\t\tReturn \\$false",
      "\t\t\t}",
      "\t\t}",
      "\t\tCatch {",
      "\t\t\t# Custom message here Write-Verbose",
      "\t\t\t\\$message = \\$_.Exception.Message",
      "\t\t\t\\$position = \\$_.InvocationInfo.PositionMessage.Split('+')[0]",
      "\t\t\tWrite-Verbose \"ERROR: \\$message\"",
      "\t\t\tWrite-Verbose \"ERROR: \\$position\"",
      "\t\t\tThrow \"\\$message \\$position\"",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Joel's custom function."
  },
  "Example-PesterTemplateUnit": {
    "prefix": "ex-PesterTmplUnit",
    "body": [
      "#Requires -version 5.1",
      "\\$moduleName = ''",
      "Import-Module \\$PSScriptRoot\\\\..\\\\\\$moduleName\\\\\\$moduleName.psd1 -Force",
      "",
      "InModuleScope -ModuleName \\$moduleName {",
      "\tDescribe -Tag 'Unit' 'My-Function' {",
      "\t\tContext 'Primary Tests' {",
      "\t\t\tIt 'should exist' {",
      "\t\t\t\t(Get-Command My-Function).Name | Should Be 'My-Function'",
      "\t\t\t}",
      "\t\t\tIt 'should throw when an error is encountered' {",
      "\t\t\t\tMock -CommandName Write-Verbose -MockWith { Throw 'Mocked' }",
      "\t\t\t\t{ My-Function -Param1 'i' -Param2 1  } | Should Throw 'Mocked'",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "For Unit tests. Joel's custom Pester template."
  },
  "Example-PesterTemplateIntegration": {
    "prefix": "ex-PesterTmplInt",
    "body": [
      "\\$moduleName = '' # Update this...",
      "#Get-Module \\$moduleName -ErrorAction SilentlyContinue | Remove-Module",
      "#Import-Module \\$PSScriptRoot\\..\\\\$moduleName.psd1 -Force",
      "",
      "#region ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SCRIPT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "",
      "InModuleScope -ModuleName $moduleName {",
      "\tDescribe -Tags 'Integration' 'My-Script' {",
      "\t\t$Global:file = \"$Global:here\\..\\\\My-Script.ps1\"",
      "\t\t$LogDir = 'TestDrive:\\dcinstall\\Logs'",
      "\t\t$LogFile  = Join-Path $LogDir 'test.log'",
      "\t\t$PSDefaultParameterValues = @{ 'Write-Log:LogFile' = $LogFile }",
      "",
      "\t\tIt 'should exist' {",
      "\t\t\tGet-Item $Global:file -ErrorAction SilentlyContinue | Should Be $true",
      "\t\t}",
      "\t\tContext 'error during main script is encountered' {",
      "\t\t\tIt 'should return 1' {",
      "\t\t\t\tMock -CommandName Write-Verbose -MockWith { Throw 'Mocked Write-Verbose'}",
      "\t\t\t\t& $Global:file | Should BeNullOrEmpty",
      "\t\t\t\t$LASTEXITCODE | Should Be 1",
      "\t\t\t\t$LogFile | Should Contain 'Mocked Write-Verbose'",
      "\t\t\t}",
      "\t\t}",
      "\t\tContext 'error during setup is encountered' {",
      "\t\t\tIt 'should return 5' {",
      "\t\t\t\tMock -CommandName Get-ChildItem -MockWith { Throw 'Mocked' }",
      "\t\t\t\tMock -CommandName Out-File -MockWith { Write-Log $args[3] }",
      "\t\t\t\t& $Global:file | Should BeNullOrEmpty",
      "\t\t\t\t$LASTEXITCODE | Should Be 5",
      "\t\t\t\t$LogFile | Should Contain 'Mocked Get-ChildItem'",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "}",
      "",
      "#endregion"
    ],
    "description": "For Integration tests. Joel's custom Pester template."
  },
  "Example-DescribeBlockUnit": {
    "prefix": "ex-describe",
    "body": [
      "Describe -Tag 'Unit' -Name 'My-Function' {",
      "\tContext 'Primary Test' {",
      "\t\tIt 'should exist' {",
      "\t\t\t(Get-Command My-Function).Name | Should Be 'My-Function'",
      "\t\t}",
      "\t\tIt 'should throw when an error is encountered' {",
      "\t\t\tMock -CommandName Write-Verbose -MockWith { Throw 'Mocked' }",
      "\t\t\t{ My-Function } | Should Throw 'Mocked'",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "For Unit tests. Creates a basic Describe block with two It tests. The first checks for the existence of the command. The second tries to throw an error."
  },
  "Example-ModuleManifest": {
    "prefix": "ex-MM",
    "body": [
      "#\\$ModulePath = 'C:\\source\\EPS\\DevOps Automation\\Dev\\'",
      "#\\$ModuleName = 'modulename'",
      "\\$newModuleManifestParameters = @{",
      "\t#ModuleVersion      = '0.0'",
      "\t#Description        = 'PowerShell'",
      "\t#Tags               = 'DevOps','PowerShell'",
      "\tPowerShellVersion  = '5.0'",
      "\tCopyRight          = \"(c) \\$(Get-date -Format yyyy) Vantiv. All rights reserved.\"",
      "\tAuthor             = 'Joel Baltrus'",
      "\tCompanyName        = 'Vantiv'",
      "\tPath               = \".\\\\\\$ModuleName.psd1\"",
      "\tRootModule         = \".\\\\\\$ModuleName.psm1\"",
      "\t#RequiredAssemblies = ''",
      "\tGuid               = ([guid]::NewGuid())",
      "\tFunctionsToExport  = '*'",
      "}",
      "",
      "# Generate the manifest",
      "Set-Location -Path \\$ModulePath",
      "New-ModuleManifest @newModuleManifestParameters"
    ],
    "description": "Creates a new Module Manifest with Vantiv specific pre-populated answers."
  },
  "Example-ParamBlock": {
    "prefix": "ex-ParamBlock",
    "body": [
      "[cmdletBinding()]",
      "Param (",
      "\t[Parameter(Mandatory=\\$true,",
      "\t           ValueFromPipelineByPropertyName=\\$false,",
      "\t           Position=0)]",
      "\t[string]\\$Param1",
      ")"
    ],
    "description": "Creates a basic Param Block."
  },
  "Example-Parameter": {
    "prefix": "ex-Parameter",
    "body": [
      "[Parameter(Mandatory=\\$true,",
      "           ValueFromPipelineByPropertyName=\\$false,",
      "           Position=0)]",
      "[string]\\$Param1"
    ],
    "description": "Creates example parameter"
  },
  "Example-ScriptTemplate": {
    "prefix": "ex-ScriptTmpl",
    "body": [
      "#Requires -version 4.0",
      "#Requires -RunAsAdministrator",
      "<#",
      "\t.SYNOPSIS",
      "\t\t< summarize the script >",
      "\t.DESCRIPTION",
      "\t\t< give details on the script >",
      "\t.EXAMPLE",
      "\t\t< usage >",
      "#>",
      "",
      "[cmdletBinding()]",
      "Param (",
      "\t[parameter(Mandatory=\\$true)]",
      "\t[object]\\$SomeObject,",
      "",
      "\t\\$ErrorActionPreference = 'Stop'",
      ")",
      "",
      "#region ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SETUP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "Push-Location",
      "\\$fileName = \\$MyInvocation.MyCommand.Name",
      "\\$DateTime = Get-Date -Format \"yyyyMMdd.HHmmss\"",
      "\\$tempPath = \"\\$env:windir\\temp\\\"",
      "\\$transcriptLog = \\$tempPath + \"\\$filename-\\$DateTime.txt\"",
      "Try { Stop-Transcript } Catch { Write-Verbose 'No running transcripts.'}",
      "Start-Transcript -Path \\$transcriptLog",
      "#endregion",
      "",
      "#region ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "#endregion",
      "",
      "#region ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "",
      "Try {",
      "\tWrite-Verbose 'Starting Main code'",
      "\t# MAIN CODE HERE",
      "",
      "\tWrite-Verbose 'Script Complete'",
      "\tStop-Transcript",
      "\tPop-Location",
      "}",
      "Catch {",
      "\tPop-Location",
      "\tWrite-Verbose \"ERROR: \\$(\\$_.Exception.Message)\"",
      "\tWrite-Verbose \"ERROR: \\$(\\$_.InvocationInfo.PositionMessage.Split('+')[0])\"",
      "\tStop-Transcript",
      "\tExit 1",
      "}",
      "",
      "#endregion"
    ],
    "description": "Joel's custom script template."
  },
  "Example-ComplianceScript": {
    "prefix": "ex-ComplianceScript",
    "body": [
      "try {",
      "\t$strKeyPath = 'HKLM:SOFTWARE\\Microsoft\\CCM'",
      "\tif (!(Test-Path -Path $strKeyPath)) {",
      "\t\t$Compliance = 'Key does not exist'",
      "\t}",
      "\telse {",
      "\t\t$strAllowedMPs = (Get-ItemProperty -Path $strKeyPath).AllowedMPs",
      "\t\tif ($strAllowedMPs -eq $null) {",
      "\t\t\t$Compliance = 'Value does not exist'",
      "\t\t}",
      "\t\telse {",
      "\t\t\t$Compliance = $strAllowedMPs -join ','",
      "\t\t}",
      "\t}",
      "}",
      "catch {",
      "\t$Compliance = $Error.Exception",
      "\t$Error.Clear()",
      "}",
      "finally {",
      "\t$Compliance",
      "}"
    ]
  },
  "Example PS Custom Object": {
    "prefix": "ex-pscustomobject",
    "body": [
      "[PSCustomObject]@{thing1='derp1'; thing2='derp2'}"
    ]
  },
  "Example Try/Catch": {
    "prefix": "ex-trycatch",
    "body": [
      "Try {",
      "",
      "}",
      "Catch {",
      "\t# Custom message here Write-Verbose",
      "\t\\$message = \\$_.Exception.Message",
      "\t\\$position = \\$_.InvocationInfo.PositionMessage.Split('+')[0]",
      "\tWrite-Verbose \"ERROR: \\$message\"",
      "\tWrite-Verbose \"ERROR: \\$position\"",
      "\tThrow \"\\$message \\$position\"",
      "}"
    ]
  },
  "Example-ItwithTestCases": {
    "prefix": "ex-ittestcase",
    "body": [
      "It \"should return '<expected>' from '<value>'\" -TestCases @(\r",
      "  @{ Value = 'Prod'; Expected = 'ValueProd' }\r",
      "  @{ Value = 'Cert'; Expected = 'ValueCert' }\r",
      "  @{ Value = 'Stage'; Expected = 'ValueStage' }\r",
      "  @{ Value = 'QA'; Expected = 'ValueQA' }\r",
      "  @{ Value = 'Dev'; Expected = 'ValueDev' }\r",
      ") {\r",
      "    param(\\$Value, \\$Expected)\r",
      "    Get-EnvironmentValueName -Environment \\$Value | Should Be \\$Expected\r",
      "}"
    ],
    "description": "It with test cases param block"
  }
}